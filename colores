#!/usr/bin/bash

version="1.0.6"
progname=$(basename "$0")

lowercase() {
    echo "$@" | tr "[:upper:]" "[:lower:]"
}

declare -A layers=(
    ["-fore"]="38"
    ["-back"]="48"
)

declare -A styles=(
    ["bold"]="\e[1m"
    ["italic"]="\e[3m"
    ["underline"]="\e[4m"
    ["flashing"]="\e[5m"
    ["inverted"]="\e[7m"
)

declare -A markers=(
    ["success"]="[\e[92m+\e[0m]"
    ["error"]="[\e[91m-\e[0m]"
    ["warning"]="[\e[93m!\e[0m]"
    ["info"]="[\e[32m*\e[0m]"
    ["question"]="[\e[96m?\e[0m]"
    ["on"]="[\e[92mON\e[0m]"
    ["off"]="[\e[91mOFF\e[0m]"
    ["debug"]="[\e[31mDEBUG\e[0m]"
)

usage="\
$progname v$version - Script for customizing text appearance.

Usage: $progname [options] [arguments]

Options:
  -fore <COLOR>
    Set foreground color using available color palettes.

  -back <COLOR>
    Set background color using available color palettes.

  -style <STYLES>
    Set style(s) to text using available styles.

  -mark <MARKER>
    Set status marker to string using available markers.

  -reset
    Reset all formatting to default appearance.

  -help
    Output this help message.

Available color palettes:
  RGB format: <\e[38;2;250;0;0mR\e[0m> <\e[38;2;0;255;0mG\e[0m> <\e[38;2;0;0;255mB\e[0m>, Example: \e[38;2;160;0;255m160 0 255\e[0m
  HEX format: <\e[38;2;0;200;255mHEX\e[0m>, Example: \e[38;2;0;200;255m00c8ff\e[0m
  ANSI format: <\e[38;5;215mANSI\e[0m>, Example: \e[38;5;215m215\e[0m

Available styles:
  ${styles[bold]}bold\e[0m | ${styles[italic]}italic\e[0m | ${styles[underline]}underline\e[0m | ${styles[flashing]}flashing\e[0m | ${styles[inverted]}inverted\e[0m

Available markers:
  success: ${markers[success]}  error: ${markers[error]}      warning: ${markers[warning]}  question: ${markers[question]}
  info: ${markers[info]}     debug: ${markers[debug]}  off: ${markers[off]}    on: ${markers[on]}\
"

if [[ $# -eq 0 ]]; then
    result="$usage"
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        "-fore" | "-back")
            if [[ "$2" =~ ^[0-9]{1,3}$ && "$2" -ge 0 && "$2" -le 255 &&
                  "$3" =~ ^[0-9]{1,3}$ && "$3" -ge 0 && "$3" -le 255 &&
                  "$4" =~ ^[0-9]{1,3}$ && "$4" -ge 0 && "$4" -le 255 ]]; then # RGB
                r="$2"
                g="$3"
                b="$4"

                color="2;$r;$g;$b"
                shifts=4
            elif [[ "$2" =~ ^[0-9A-Fa-f]{6}$ ]]; then # HEX
                hex="$2"
                r="$(( 16#${hex:0:2} ))"
                g="$(( 16#${hex:2:2} ))"
                b="$(( 16#${hex:4:2} ))"

                color="2;$r;$g;$b"
                shifts=2
            elif [[ "$2" =~ ^[0-9]{1,3} && "$2" -ge 0 && "$2" -le 255 ]]; then # ANSI
                ansi="$2"

                color="5;$ansi"
                shifts=2
            else
                no_color="true"
                shifts=1
            fi

            if [[ "$no_color" != "true" ]]; then
                result+="\e[${layers[$1]};${color}m"
            fi

            shift $shifts
            ;;
        "-style")
            shift

            for style in "$@"; do
                style="${styles[$(lowercase "$style")]}"

                if [[ -n "$style" ]]; then
                    result+="$style"
                    shift
                fi
            done
            ;;
        "-mark")
            shift

            if [[ -n "$1" ]]; then
                marker="${markers[$(lowercase "$1")]}"

                if [[ -n "$marker" ]]; then
                    result="\e[0m $marker $result"
                    shift
                fi
            fi
            ;;
        "-reset")
            result="\e[0m"
            break
            ;;
        "-help")
            result="$usage"
            break
            ;;
        *)
            shift
            ;;
    esac
done

if [[ -n "$result" ]]; then
    echo -e "$result"
fi
