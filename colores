#!/usr/bin/bash

version="1.1.7"
appname=$(basename "$0")

declare -A color_layers=(
    ["fore"]="38"
    ["back"]="48"
)

declare -A text_styles=(
    ["bold"]="\e[1m"
    ["italic"]="\e[3m"
    ["underline"]="\e[4m"
    ["flashing"]="\e[5m"
    ["inverted"]="\e[7m"
)

declare -A status_markers=(
    ["success"]="[\e[92m+\e[0m]"
    ["error"]="[\e[91m-\e[0m]"
    ["warning"]="[\e[93m!\e[0m]"
    ["info"]="[\e[32m*\e[0m]"
    ["question"]="[\e[96m?\e[0m]"
    ["on"]="[\e[92mON\e[0m]"
    ["off"]="[\e[91mOFF\e[0m]"
    ["debug"]="[\e[31mDEBUG\e[0m]"
)

lowercase() {
    local text="$1"

    echo "$text" | tr "[:upper:]" "[:lower:]"
}

get_args() {
    local args="$1"

    echo -E "${args%% -*}"
}

is_valid_color() {
    local color=$1

    [[ $color =~ ^[0-9]{1,3}$ && $color -ge 0 && $color -le 255 ]] && echo 1
}

get_color() {
    local color=($1)
    local color_len=${#color[@]}

    local layer="${color_layers[$2]}"

    local result

    if [[ $color_len -eq 3 &&
          $(is_valid_color ${color[0]}) -eq 1 &&
          $(is_valid_color ${color[1]}) -eq 1 &&
          $(is_valid_color ${color[2]}) -eq 1 ]]; then # RGB: 0-255, 0-255, 0-255
        local r=${color[0]}
        local g=${color[1]}
        local b=${color[2]}

        result="2;$r;$g;$b"
    elif [[ $color_len -eq 1 && "${color[0]}" =~ ^[0-9A-Fa-f]{6}$ ]]; then # HEX: 0-9|a-f|A-F
        local hex="${color[0]}"

        local r=$(( 16#${hex:0:2} ))
        local g=$(( 16#${hex:2:2} ))
        local b=$(( 16#${hex:4:2} ))

        result="2;$r;$g;$b"
    elif [[ $color_len -eq 1 && $(is_valid_color ${color[0]}) -eq 1 ]]; then # ANSI: 0-255
        local ansi=${color[0]}

        result="5;$ansi"
    fi

    if [ -n "$result" ]; then
        result="\e[${layer};${result}m"

        echo -E "$result"
    fi
}

get_style() {
    local style=$(lowercase "$1")

    if [ -n "$style" ]; then
        local result="${text_styles[$style]}"
    fi

    if [ -n "$result" ]; then
        echo -E "$result"
    fi
}

get_marker() {
    local marker=$(lowercase "$1")

    if [ -n "$marker" ]; then
        local result="${status_markers[$marker]}"
    fi

    if [ -n "$result" ]; then
        echo -E "$result"
    fi
}

usage() {
    echo -e "\
$appname v$version - Script for customizing text appearance.

Usage: $appname [options] [arguments]

Options:
  -fore <COLOR>
    Set foreground color using available color palettes.

  -back <COLOR>
    Set background color using available color palettes.

  -style <STYLES>
    Set style(s) to text using available styles.

  -mark <MARKER>
    Set status marker to string using available markers.

  -reset
    Reset all formatting to default appearance.

  -help
    Output this help message.

Available color palettes:
  RGB format: $(get_color "160 0 255" "fore")160 0 255\e[0m
  HEX format: $(get_color "00C8FF" "fore")00C8FF\e[0m
  ANSI format: $(get_color 215 "fore")215\e[0m

Available styles:
  $(get_style "bold")bold\e[0m |\
 $(get_style "italic")italic\e[0m |\
 $(get_style "underline")underline\e[0m |\
 $(get_style "flashing")flashing\e[0m |\
 $(get_style "inverted")inverted\e[0m

Available markers:
  success: $(get_marker "success")\
  info: $(get_marker "info") \
  question: $(get_marker "question") \
  on: $(get_marker "on")
  warning: $(get_marker "warning")\
  error: $(get_marker "error")\
  debug: $(get_marker "debug")\
  off: $(get_marker "off")\
"

    exit 0
}

if [ $# -eq 0 ]; then
    usage
fi

while [ $# -gt 0 ]; do
    case "$1" in
        "-fore" | "-back")
            args=($(get_args "$*")) # -fore 255 0 170 -back FF00AA -style italic... > '-fore 255 0 170'
            args_len=${#args[@]}

            layer="${args[0]:1}" # -fore 255 0 170 > 'fore'
            color="${args[*]:1}" # -fore 255 0 170 > '255 0 170'

            result_color=$(get_color "$color" "$layer")

            if [ -n "$result_color" ]; then
                output+="$result_color"
            fi

            shift $args_len
            ;;
        "-style")
            args=($(get_args "$*")) # -style italic flashing -fore FF00AA... > '-style italic flashing'
            args_len=${#args[@]}

            styles="${args[@]:1}" # -style italic flashing > 'italic flashing'

            for style in $styles; do
                result_style=$(get_style "$style")

                if [ -n "$result_style" ]; then
                    output+="$result_style"
                fi
            done

            shift $args_len
            ;;
        "-mark")
            args=($(get_args "$*")) # -mark success 'no_valid_marker' -back 255 0 170... > '-mark success no_valid_marker'
            args_len=${#args[@]}

            marker="${args[1]}" # -mark success no_valid_marker > 'success'

            result_marker=$(get_marker "$marker")

            if [ -n "$result_marker" ]; then
                output="\e[0m $result_marker $output"
            fi

            shift $args_len
            ;;
        "-reset")
            output="\e[0m"
            break
            ;;
        "-help")
            usage
            ;;
        *)
            shift
            ;;
    esac
done

if [ -n "$output" ]; then
    echo -E "$output"
    exit 0
else
    exit 1
fi
